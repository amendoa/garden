/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var files = __webpack_require__(1);

	files.keys().forEach(files);

/***/ },
/* 1 */
/***/ function(module, exports, __webpack_require__) {

	var map = {
		"./components/alert": 2,
		"./components/alert.js": 2,
		"./components/collapse": 7,
		"./components/collapse.js": 7,
		"./components/form": 8,
		"./components/form.js": 8,
		"./components/lazy-load": 9,
		"./components/lazy-load.js": 9,
		"./components/modal": 4,
		"./components/modal.js": 4,
		"./components/notification": 12,
		"./components/notification.js": 12,
		"./components/scroll": 14,
		"./components/scroll.js": 14,
		"./components/tooltip": 18,
		"./components/tooltip.js": 18,
		"./components/validation": 20,
		"./components/validation.js": 20,
		"./components/validation/confirm": 23,
		"./components/validation/confirm.js": 23,
		"./components/validation/defaults": 21,
		"./components/validation/defaults.js": 21,
		"./components/validation/email": 26,
		"./components/validation/email.js": 26,
		"./components/validation/maxlength": 25,
		"./components/validation/maxlength.js": 25,
		"./components/validation/minlength": 24,
		"./components/validation/minlength.js": 24,
		"./components/validation/required": 22,
		"./components/validation/required.js": 22
	};
	function webpackContext(req) {
		return __webpack_require__(webpackContextResolve(req));
	};
	function webpackContextResolve(req) {
		return map[req] || (function() { throw new Error("Cannot find module '" + req + "'.") }());
	};
	webpackContext.keys = function webpackContextKeys() {
		return Object.keys(map);
	};
	webpackContext.resolve = webpackContextResolve;
	module.exports = webpackContext;
	webpackContext.id = 1;


/***/ },
/* 2 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.Alert = undefined;

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _jquery = __webpack_require__(3);

	var _jquery2 = _interopRequireDefault(_jquery);

	var _modal = __webpack_require__(4);

	var _modal2 = _interopRequireDefault(_modal);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	var NAME = 'alert';

	var DEFAULTS = {
	  textMessage: 'This is an example message',
	  textButton: 'Ok',
	  size: 'medium',
	  triggerClose: '[data-alert-button]'
	};

	var Alert = function () {
	  function Alert() {
	    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

	    _classCallCheck(this, Alert);

	    this.options = _jquery2.default.extend({}, DEFAULTS, options);
	  }

	  _createClass(Alert, [{
	    key: 'init',
	    value: function init() {
	      this.setupAlert();
	      this.showAlert();
	    }
	  }, {
	    key: 'setupAlert',
	    value: function setupAlert() {
	      var _options = this.options,
	          textMessage = _options.textMessage,
	          textButton = _options.textButton,
	          size = _options.size,
	          triggerClose = _options.triggerClose;

	      this.$element = (0, _jquery2.default)(this.buildHtml(textMessage, textButton));

	      this.modal = (0, _jquery2.default)(this.$element).modal({ triggerClose: triggerClose, size: size }).data('modal');
	    }
	  }, {
	    key: 'showAlert',
	    value: function showAlert() {
	      this.modal.show();
	    }
	  }, {
	    key: 'hideAlert',
	    value: function hideAlert() {
	      this.modal.hide();
	    }
	  }, {
	    key: 'buildHtml',
	    value: function buildHtml(textMessage, textButton) {
	      return '\n      <div>\n        <div class="container-fluid align-center">\n          <div class="row">\n            <div class="col-xs-12">\n              <p data-alert-text>' + textMessage + '</p>\n            </div>\n            <div class="row">\n              <div class="col-xs-offset-2 col-xs-8 col-md-offset-4 col-md-4">\n                <button class="button button-primary button-full" data-alert-button>\n                  ' + textButton + '\n                </button>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    ';
	    }
	  }]);

	  return Alert;
	}();

	/* istanbul ignore next */


	_jquery2.default.fn[NAME] = function (options) {
	  return _jquery2.default.data(this, NAME, new Alert(options).init());
	};

	/* istanbul ignore next */

	exports.default = function (options) {
	  return new Alert(options).init();
	};

		exports.Alert = Alert;

/***/ },
/* 3 */
/***/ function(module, exports) {

	module.exports = $;

/***/ },
/* 4 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _jquery = __webpack_require__(3);

	var _jquery2 = _interopRequireDefault(_jquery);

	var _emitter = __webpack_require__(5);

	var _emitter2 = _interopRequireDefault(_emitter);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	var NAME = 'modal';
	var HASH = '#modal-open';

	var templates = {
	  modal: '<div class="modal"></div>',
	  close: '<i class="modal-close glyph glyph-x"></i>',
	  content: '<div class="modal-content"><div class="modal-body"></div></div>'
	};

	var DEFAULTS = {
	  container: 'body',
	  size: 'medium',
	  triggerClose: null,
	  static: false,
	  keyboard: true,
	  history: false,
	  keys: { esc: 27 },
	  triggerOpen: null
	};

	var Modal = function () {
	  function Modal(element, options) {
	    _classCallCheck(this, Modal);

	    this.$element = element instanceof _jquery2.default ? element : (0, _jquery2.default)(element);
	    this.options = _jquery2.default.extend({}, DEFAULTS, options || {});
	  }

	  _createClass(Modal, [{
	    key: 'init',
	    value: function init() {
	      this.$container = (0, _jquery2.default)(this.options.container);
	      this.createModal();

	      return this;
	    }
	  }, {
	    key: 'show',
	    value: function show() {
	      this.bindListeners();
	      this.showModal();
	    }
	  }, {
	    key: 'hide',
	    value: function hide() {
	      this.unbindListeners();
	      this.hideModal();
	    }
	  }, {
	    key: 'destroy',
	    value: function destroy() {
	      this.$element.removeData(NAME);
	      this.$modal.remove();
	    }
	  }, {
	    key: 'bindListeners',
	    value: function bindListeners() {
	      if (this.options.triggerClose) {
	        this.$modal.on('click', this.options.triggerClose, this.hide.bind(this));
	      }

	      this.$close.on('click', this.hide.bind(this));

	      this.bindKeyboardListener();

	      if (this.options.history) {
	        this.bindModalShowListener();
	        this.bindHashChangeListener();
	        this.bindModalHideListener();
	      }
	    }
	  }, {
	    key: 'bindKeyboardListener',
	    value: function bindKeyboardListener() {
	      var _this = this;

	      if (this.options.keyboard) {
	        (0, _jquery2.default)(window).on('keyup', function (e) {
	          var esc = _this.options.keys.esc;

	          var key = e.which;

	          if (key === esc) {
	            _this.hide();
	          }
	        });
	      }
	    }
	  }, {
	    key: 'bindModalShowListener',
	    value: function bindModalShowListener() {
	      _emitter2.default.on('modal:show', function () {
	        window.location.hash = HASH;
	      });
	    }
	  }, {
	    key: 'bindHashChangeListener',
	    value: function bindHashChangeListener() {
	      var _this2 = this;

	      (0, _jquery2.default)(window).on('hashchange', function () {
	        if (window.location.hash) {
	          return;
	        }

	        _this2.hide();
	      });
	    }
	  }, {
	    key: 'bindModalHideListener',
	    value: function bindModalHideListener() {
	      _emitter2.default.on('modal:hide', function () {
	        history.back();
	      });
	    }
	  }, {
	    key: 'unbindListeners',
	    value: function unbindListeners() {
	      if (this.options.triggerClose) {
	        this.$modal.off('click', this.options.triggerClose, this.hide.bind(this));
	      }

	      this.$close.off('click');
	      (0, _jquery2.default)(window).off('keyup', this.handler);
	    }
	  }, {
	    key: 'bindTrigger',
	    value: function bindTrigger() {
	      if (this.options.triggerOpen) {
	        (0, _jquery2.default)(this.options.triggerOpen).on('click', this.onTriggerOpenClick.bind(this));
	      }
	    }
	  }, {
	    key: 'onTriggerOpenClick',
	    value: function onTriggerOpenClick(event) {
	      event.preventDefault();
	      this.show();
	    }
	  }, {
	    key: 'showModal',
	    value: function showModal() {
	      var _this3 = this;

	      _emitter2.default.emit('modal:show');
	      _emitter2.default.removeAllListeners('modal:show');

	      this.$modal.addClass('modal-enter');
	      this.$content.addClass('modal-content-enter');
	      this.$container.addClass('no-scroll');

	      window.setTimeout(function () {
	        _this3.$modal.addClass('modal-show');
	        _this3.$content.addClass('modal-content-show');
	      }, 200);

	      this.$modal.on('click', this.onModalClick.bind(this));
	    }
	  }, {
	    key: 'hideModal',
	    value: function hideModal() {
	      var _this4 = this;

	      if (window.location.hash) {
	        _emitter2.default.emit('modal:hide');
	      }
	      _emitter2.default.removeAllListeners('modal:hide');

	      this.$content.removeClass('modal-content-show').addClass('modal-content-leave');

	      this.$modal.removeClass('modal-show').addClass('modal-leave');

	      this.$container.removeClass('no-scroll');

	      window.setTimeout(function () {
	        _this4.$modal.removeClass('modal-enter modal-leave');
	        _this4.$content.removeClass('modal-content-enter modal-content-leave');
	      }, 200);
	    }
	  }, {
	    key: 'onModalClick',
	    value: function onModalClick(event) {
	      if (!this.isStaticModal() && this.$modal.is(event.target)) {
	        this.hideModal();
	      }
	    }
	  }, {
	    key: 'fillModal',
	    value: function fillModal() {
	      this.$content.find('.modal-body').append(this.$element.html());
	    }
	  }, {
	    key: 'createModal',
	    value: function createModal() {
	      this.$modal = (0, _jquery2.default)(templates.modal);
	      this.$content = (0, _jquery2.default)(templates.content);
	      this.$close = (0, _jquery2.default)(templates.close);

	      this.$content.addClass(this.setupSizeModal(this.options.size));

	      if (!this.isStaticModal()) {
	        this.$content.append(this.$close);
	      }

	      this.$modal.append(this.$content);

	      this.$container.append(this.$modal);

	      this.bindTrigger();
	      this.fillModal();
	    }
	  }, {
	    key: 'isStaticModal',
	    value: function isStaticModal() {
	      return this.options.static;
	    }
	  }, {
	    key: 'setupSizeModal',
	    value: function setupSizeModal(size) {
	      var sizes = {
	        'small': 'modal-content-sm',
	        'medium': 'modal-content-md',
	        'large': 'modal-content-lg'
	      };

	      return sizes[size];
	    }
	  }]);

	  return Modal;
	}();

	/* istanbul ignore next */


	_jquery2.default.fn[NAME] = function (options) {
	  options = options || {};

	  return this.each(function () {
	    if (!_jquery2.default.data(this, NAME)) {
	      _jquery2.default.data(this, NAME, new Modal(this, options).init());
	    }
	  });
	};

	exports.default = Modal;

/***/ },
/* 5 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _events = __webpack_require__(6);

	var _events2 = _interopRequireDefault(_events);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

		exports.default = new _events2.default();

/***/ },
/* 6 */
/***/ function(module, exports) {

	// Copyright Joyent, Inc. and other Node contributors.
	//
	// Permission is hereby granted, free of charge, to any person obtaining a
	// copy of this software and associated documentation files (the
	// "Software"), to deal in the Software without restriction, including
	// without limitation the rights to use, copy, modify, merge, publish,
	// distribute, sublicense, and/or sell copies of the Software, and to permit
	// persons to whom the Software is furnished to do so, subject to the
	// following conditions:
	//
	// The above copyright notice and this permission notice shall be included
	// in all copies or substantial portions of the Software.
	//
	// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
	// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
	// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
	// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
	// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
	// USE OR OTHER DEALINGS IN THE SOFTWARE.

	function EventEmitter() {
	  this._events = this._events || {};
	  this._maxListeners = this._maxListeners || undefined;
	}
	module.exports = EventEmitter;

	// Backwards-compat with node 0.10.x
	EventEmitter.EventEmitter = EventEmitter;

	EventEmitter.prototype._events = undefined;
	EventEmitter.prototype._maxListeners = undefined;

	// By default EventEmitters will print a warning if more than 10 listeners are
	// added to it. This is a useful default which helps finding memory leaks.
	EventEmitter.defaultMaxListeners = 10;

	// Obviously not all Emitters should be limited to 10. This function allows
	// that to be increased. Set to zero for unlimited.
	EventEmitter.prototype.setMaxListeners = function(n) {
	  if (!isNumber(n) || n < 0 || isNaN(n))
	    throw TypeError('n must be a positive number');
	  this._maxListeners = n;
	  return this;
	};

	EventEmitter.prototype.emit = function(type) {
	  var er, handler, len, args, i, listeners;

	  if (!this._events)
	    this._events = {};

	  // If there is no 'error' event listener then throw.
	  if (type === 'error') {
	    if (!this._events.error ||
	        (isObject(this._events.error) && !this._events.error.length)) {
	      er = arguments[1];
	      if (er instanceof Error) {
	        throw er; // Unhandled 'error' event
	      } else {
	        // At least give some kind of context to the user
	        var err = new Error('Uncaught, unspecified "error" event. (' + er + ')');
	        err.context = er;
	        throw err;
	      }
	    }
	  }

	  handler = this._events[type];

	  if (isUndefined(handler))
	    return false;

	  if (isFunction(handler)) {
	    switch (arguments.length) {
	      // fast cases
	      case 1:
	        handler.call(this);
	        break;
	      case 2:
	        handler.call(this, arguments[1]);
	        break;
	      case 3:
	        handler.call(this, arguments[1], arguments[2]);
	        break;
	      // slower
	      default:
	        args = Array.prototype.slice.call(arguments, 1);
	        handler.apply(this, args);
	    }
	  } else if (isObject(handler)) {
	    args = Array.prototype.slice.call(arguments, 1);
	    listeners = handler.slice();
	    len = listeners.length;
	    for (i = 0; i < len; i++)
	      listeners[i].apply(this, args);
	  }

	  return true;
	};

	EventEmitter.prototype.addListener = function(type, listener) {
	  var m;

	  if (!isFunction(listener))
	    throw TypeError('listener must be a function');

	  if (!this._events)
	    this._events = {};

	  // To avoid recursion in the case that type === "newListener"! Before
	  // adding it to the listeners, first emit "newListener".
	  if (this._events.newListener)
	    this.emit('newListener', type,
	              isFunction(listener.listener) ?
	              listener.listener : listener);

	  if (!this._events[type])
	    // Optimize the case of one listener. Don't need the extra array object.
	    this._events[type] = listener;
	  else if (isObject(this._events[type]))
	    // If we've already got an array, just append.
	    this._events[type].push(listener);
	  else
	    // Adding the second element, need to change to array.
	    this._events[type] = [this._events[type], listener];

	  // Check for listener leak
	  if (isObject(this._events[type]) && !this._events[type].warned) {
	    if (!isUndefined(this._maxListeners)) {
	      m = this._maxListeners;
	    } else {
	      m = EventEmitter.defaultMaxListeners;
	    }

	    if (m && m > 0 && this._events[type].length > m) {
	      this._events[type].warned = true;
	      console.error('(node) warning: possible EventEmitter memory ' +
	                    'leak detected. %d listeners added. ' +
	                    'Use emitter.setMaxListeners() to increase limit.',
	                    this._events[type].length);
	      if (typeof console.trace === 'function') {
	        // not supported in IE 10
	        console.trace();
	      }
	    }
	  }

	  return this;
	};

	EventEmitter.prototype.on = EventEmitter.prototype.addListener;

	EventEmitter.prototype.once = function(type, listener) {
	  if (!isFunction(listener))
	    throw TypeError('listener must be a function');

	  var fired = false;

	  function g() {
	    this.removeListener(type, g);

	    if (!fired) {
	      fired = true;
	      listener.apply(this, arguments);
	    }
	  }

	  g.listener = listener;
	  this.on(type, g);

	  return this;
	};

	// emits a 'removeListener' event iff the listener was removed
	EventEmitter.prototype.removeListener = function(type, listener) {
	  var list, position, length, i;

	  if (!isFunction(listener))
	    throw TypeError('listener must be a function');

	  if (!this._events || !this._events[type])
	    return this;

	  list = this._events[type];
	  length = list.length;
	  position = -1;

	  if (list === listener ||
	      (isFunction(list.listener) && list.listener === listener)) {
	    delete this._events[type];
	    if (this._events.removeListener)
	      this.emit('removeListener', type, listener);

	  } else if (isObject(list)) {
	    for (i = length; i-- > 0;) {
	      if (list[i] === listener ||
	          (list[i].listener && list[i].listener === listener)) {
	        position = i;
	        break;
	      }
	    }

	    if (position < 0)
	      return this;

	    if (list.length === 1) {
	      list.length = 0;
	      delete this._events[type];
	    } else {
	      list.splice(position, 1);
	    }

	    if (this._events.removeListener)
	      this.emit('removeListener', type, listener);
	  }

	  return this;
	};

	EventEmitter.prototype.removeAllListeners = function(type) {
	  var key, listeners;

	  if (!this._events)
	    return this;

	  // not listening for removeListener, no need to emit
	  if (!this._events.removeListener) {
	    if (arguments.length === 0)
	      this._events = {};
	    else if (this._events[type])
	      delete this._events[type];
	    return this;
	  }

	  // emit removeListener for all listeners on all events
	  if (arguments.length === 0) {
	    for (key in this._events) {
	      if (key === 'removeListener') continue;
	      this.removeAllListeners(key);
	    }
	    this.removeAllListeners('removeListener');
	    this._events = {};
	    return this;
	  }

	  listeners = this._events[type];

	  if (isFunction(listeners)) {
	    this.removeListener(type, listeners);
	  } else if (listeners) {
	    // LIFO order
	    while (listeners.length)
	      this.removeListener(type, listeners[listeners.length - 1]);
	  }
	  delete this._events[type];

	  return this;
	};

	EventEmitter.prototype.listeners = function(type) {
	  var ret;
	  if (!this._events || !this._events[type])
	    ret = [];
	  else if (isFunction(this._events[type]))
	    ret = [this._events[type]];
	  else
	    ret = this._events[type].slice();
	  return ret;
	};

	EventEmitter.prototype.listenerCount = function(type) {
	  if (this._events) {
	    var evlistener = this._events[type];

	    if (isFunction(evlistener))
	      return 1;
	    else if (evlistener)
	      return evlistener.length;
	  }
	  return 0;
	};

	EventEmitter.listenerCount = function(emitter, type) {
	  return emitter.listenerCount(type);
	};

	function isFunction(arg) {
	  return typeof arg === 'function';
	}

	function isNumber(arg) {
	  return typeof arg === 'number';
	}

	function isObject(arg) {
	  return typeof arg === 'object' && arg !== null;
	}

	function isUndefined(arg) {
	  return arg === void 0;
	}


/***/ },
/* 7 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _jquery = __webpack_require__(3);

	var _jquery2 = _interopRequireDefault(_jquery);

	var _emitter = __webpack_require__(5);

	var _emitter2 = _interopRequireDefault(_emitter);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	var NAME = 'collapse';
	var DEFAULTS = {
	  selector: 'data-target',
	  listener: 'click',
	  activeClass: 'active',
	  visibleClass: 'visible',
	  timing: 300
	};

	var Collapse = function () {
	  function Collapse(element, options) {
	    _classCallCheck(this, Collapse);

	    this.$element = (0, _jquery2.default)(element);

	    this.options = _jquery2.default.extend({}, DEFAULTS, options || {});
	  }

	  _createClass(Collapse, [{
	    key: 'init',
	    value: function init() {
	      this.$toggle = (0, _jquery2.default)(this.$element.attr(this.options.selector));
	      this.toggle = this.$toggle[0];

	      this.setInitialState();
	      this.bindListeners();

	      return this;
	    }
	  }, {
	    key: 'setInitialState',
	    value: function setInitialState() {
	      var _this = this;

	      this.isCollapsed = !this.$toggle.hasClass(this.options.visibleClass);

	      setTimeout(function () {
	        _this.toggleHeight = _this.toggle.scrollHeight;
	      }, this.options.timing);

	      if (!this.isCollapsed) {
	        this.toggle.style.maxHeight = this.toggleHeight + 'px';
	      }
	    }
	  }, {
	    key: 'bindListeners',
	    value: function bindListeners() {
	      this.$element.on(this.options.listener, this.toggleTarget.bind(this));
	    }
	  }, {
	    key: 'toggleTarget',
	    value: function toggleTarget() {
	      this.isCollapsed ? this.showTarget() : this.hideTarget();
	    }
	  }, {
	    key: 'hideTarget',
	    value: function hideTarget() {
	      this.isCollapsed = true;

	      this.toggle.style.maxHeight = '';
	      this.$toggle.removeClass(this.options.visibleClass);
	      this.$element.removeClass(this.options.activeClass);

	      _emitter2.default.emit('collapse:hide', this.$element, this.$toggle);
	    }
	  }, {
	    key: 'showTarget',
	    value: function showTarget() {
	      this.isCollapsed = false;

	      this.toggle.style.maxHeight = this.toggleHeight + 'px';
	      this.$toggle.addClass(this.options.visibleClass);
	      this.$element.addClass(this.options.activeClass);

	      _emitter2.default.emit('collapse:show', this.$element, this.$toggle);
	    }
	  }]);

	  return Collapse;
	}();

	/* istanbul ignore next */


	_jquery2.default.fn[NAME] = function (options) {
	  options = options || {};

	  return this.each(function () {
	    if (!_jquery2.default.data(this, NAME)) {
	      _jquery2.default.data(this, NAME, new Collapse(this, options).init());
	    }
	  });
	};

	exports.default = Collapse;

/***/ },
/* 8 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _jquery = __webpack_require__(3);

	var _jquery2 = _interopRequireDefault(_jquery);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	var NAME = 'form';
	var DEFAULTS = {
	  events: 'change',
	  selectors: '.input, select, .select, .textarea'
	};

	var Form = function () {
	  function Form(element, options) {
	    _classCallCheck(this, Form);

	    this.$element = (0, _jquery2.default)(element);
	    this.options = _jquery2.default.extend({}, DEFAULTS, options || {});

	    this.bindListeners();

	    this.toggleFieldsActiveClass();
	  }

	  _createClass(Form, [{
	    key: 'bindListeners',
	    value: function bindListeners() {
	      (0, _jquery2.default)(document).on(this.options.events, this.options.selectors, this.onFieldChange.bind(this));
	    }
	  }, {
	    key: 'onFieldChange',
	    value: function onFieldChange(event) {
	      this.toggleActiveClass(event.target);
	    }
	  }, {
	    key: 'shouldInputBeActive',
	    value: function shouldInputBeActive($input) {
	      var value = $input.val();

	      if ($input.is('select')) {
	        value = $input.find('option:selected').text().trim();
	      }

	      return !!value;
	    }
	  }, {
	    key: 'toggleActiveClass',
	    value: function toggleActiveClass(input) {
	      var $input = (0, _jquery2.default)(input);
	      var $field = $input.parents('.field');

	      if (!$field.length) {
	        return;
	      }

	      if (!$field.hasClass('active') && this.shouldInputBeActive($input)) {
	        return $field.addClass('active');
	      }

	      if ($field.hasClass('active') && !this.shouldInputBeActive($input)) {
	        return $field.removeClass('active');
	      }
	    }
	  }, {
	    key: 'toggleFieldsActiveClass',
	    value: function toggleFieldsActiveClass() {
	      Array.prototype.forEach.call((0, _jquery2.default)(document).find(this.options.selectors), this.toggleActiveClass.bind(this));
	    }
	  }]);

	  return Form;
	}();

	/* istanbul ignore next */


	_jquery2.default.fn[NAME] = function (options) {
	  options = options || {};

	  return this.each(function () {
	    if (!_jquery2.default.data(this, NAME)) {
	      _jquery2.default.data(this, NAME, new Form(this, options));
	    }
	  });
	};

	exports.default = Form;

/***/ },
/* 9 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _jquery = __webpack_require__(3);

	var _jquery2 = _interopRequireDefault(_jquery);

	var _throttle = __webpack_require__(10);

	var _throttle2 = _interopRequireDefault(_throttle);

	var _removeArrayLike = __webpack_require__(11);

	var _removeArrayLike2 = _interopRequireDefault(_removeArrayLike);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	var NAME = 'lazyload';
	var DEFAULTS = {
	  throttle: 1000,
	  offset: 200,
	  selector: 'data-lazy'
	};

	var LazyLoad = function () {
	  function LazyLoad(element, options) {
	    _classCallCheck(this, LazyLoad);

	    this.$element = (0, _jquery2.default)(element);
	    this.options = _jquery2.default.extend({}, DEFAULTS, options || {});
	  }

	  _createClass(LazyLoad, [{
	    key: 'init',
	    value: function init() {
	      this.bindListeners();
	      this.checkVisiblePlaceholders();

	      return this;
	    }
	  }, {
	    key: 'bindListeners',
	    value: function bindListeners() {
	      this.onScrollHandler = (0, _throttle2.default)(this.onScroll.bind(this), this.options.throttle);
	      (0, _jquery2.default)(window).on('scroll', this.onScrollHandler);
	    }
	  }, {
	    key: 'onScroll',
	    value: function onScroll() {
	      return this.$element.length ? this.checkVisiblePlaceholders() : (0, _jquery2.default)(window).off('scroll', this.onScrollHandler);
	    }
	  }, {
	    key: 'checkVisiblePlaceholders',
	    value: function checkVisiblePlaceholders() {
	      this.windowHeight = (0, _jquery2.default)(window).height();
	      this.windowWidth = (0, _jquery2.default)(window).width();

	      Array.prototype.forEach.call(this.$element, this.checkPlaceholder.bind(this));
	    }
	  }, {
	    key: 'checkPlaceholder',
	    value: function checkPlaceholder(placeholder) {
	      if (this.isPlaceholderVisible(placeholder)) {
	        this.renderImage(placeholder);
	        (0, _removeArrayLike2.default)(this.$element, placeholder);
	      }
	    }
	  }, {
	    key: 'isPlaceholderVisible',
	    value: function isPlaceholderVisible(placeholder) {
	      return placeholder.getBoundingClientRect().top <= this.windowHeight + this.options.offset;
	    }
	  }, {
	    key: 'renderImage',
	    value: function renderImage(placeholder) {
	      placeholder.parentNode.replaceChild(this.createImage(placeholder), placeholder);
	    }
	  }, {
	    key: 'createImage',
	    value: function createImage(placeholder) {
	      var image = document.createElement('img');

	      this.parseAttributes(image, placeholder.attributes);

	      image.removeAttribute('data-lazy');

	      if (placeholder.getAttribute('data-srcset')) {
	        this.parseBreakpoints(image, placeholder.getAttribute('data-srcset'));

	        return image;
	      }

	      image.src = placeholder.getAttribute('data-src');

	      return image;
	    }
	  }, {
	    key: 'parseAttributes',
	    value: function parseAttributes(image, attributes) {
	      var _this = this;

	      Array.prototype.forEach.call(attributes, function (attr) {
	        if (attr.name !== _this.options.selector || attr.name !== 'data-srcset' || attr.name !== 'data-src') {
	          image.setAttribute(attr.name, attr.value);
	        }
	      });

	      return image;
	    }
	  }, {
	    key: 'parseBreakpoints',
	    value: function parseBreakpoints(image, breakpoints) {
	      image.removeAttribute('data-srcset');

	      breakpoints = breakpoints.split(/,\s+/g).map(function (breakpoint) {
	        breakpoint = breakpoint.trim().split(/\s+/);

	        return {
	          src: breakpoint[0],
	          width: breakpoint[1]
	        };
	      }).sort(function (a, b) {
	        return b.width - a.width;
	      });

	      for (var i = 0; i < breakpoints.length; i++) {
	        var breakpoint = breakpoints[i];

	        if (breakpoint.width <= this.windowWidth) {
	          image.src = breakpoint.src;
	          break;
	        }
	      }

	      return image;
	    }
	  }, {
	    key: 'destroy',
	    value: function destroy() {
	      (0, _jquery2.default)(window).off('scroll', this.onScrollHandler);
	    }
	  }]);

	  return LazyLoad;
	}();

	/* istanbul ignore next */


	_jquery2.default.fn[NAME] = function (options) {
	  options = options || {};

	  return this.each(function () {
	    if (!_jquery2.default.data(this, NAME)) {
	      _jquery2.default.data(this, NAME, new LazyLoad(this, options).init());
	    }
	  });
	};

	exports.default = LazyLoad;

/***/ },
/* 10 */
/***/ function(module, exports) {

	"use strict";

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	exports.default = function (fn, timer) {
	  var wait = true;

	  return function () {
	    if (wait) {
	      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
	        args[_key] = arguments[_key];
	      }

	      fn.apply(this, args);

	      wait = false;

	      setTimeout(function () {
	        wait = true;
	        return wait;
	      }, timer);
	    }
	  };
	};

/***/ },
/* 11 */
/***/ function(module, exports) {

	"use strict";

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	exports.default = function (arr, item) {
	  Array.prototype.splice.call(arr, Array.prototype.indexOf.call(arr, item));
	};

/***/ },
/* 12 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _jquery = __webpack_require__(3);

	var _jquery2 = _interopRequireDefault(_jquery);

	var _transitionend = __webpack_require__(13);

	var _transitionend2 = _interopRequireDefault(_transitionend);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	var NAME = 'notification';

	var DEFAULTS = {
	  autoHide: false,
	  closeButton: '.' + NAME + '-close',
	  dynamic: true,
	  hideIn: 3000,
	  message: null,
	  showIn: 1000,
	  type: 'primary'
	};

	var classNames = {
	  hide: NAME + '-hide',
	  show: NAME + '-show',
	  enter: NAME + '-enter',
	  leave: NAME + '-leave',
	  close: NAME + '-close'
	};

	var templates = {
	  box: '<div class="' + NAME + ' ' + classNames.enter + '"></div>',
	  close: '<i class="' + classNames.close + ' glyph glyph-x"></i>'
	};

	var Notification = function () {
	  function Notification(element, options) {
	    _classCallCheck(this, Notification);

	    this.$element = element instanceof _jquery2.default ? element : (0, _jquery2.default)(element);
	    this.options = _jquery2.default.extend({}, DEFAULTS, options);
	  }

	  /**
	   * Init notification, insert notifiction into DOM, bind close button and
	   * show notifiction based on showIn config
	   */


	  _createClass(Notification, [{
	    key: 'init',
	    value: function init() {
	      var _this = this;

	      this._createNotification();
	      this.bindListeners();

	      if (!this.options.dynamic) {
	        return this;
	      }

	      window.setTimeout(function () {
	        _this.show();
	      }, this.options.showIn);

	      return this;
	    }

	    /**
	     * Bind close button
	     */

	  }, {
	    key: 'bindListeners',
	    value: function bindListeners() {
	      var _this2 = this;

	      this.$closeHandler = function () {
	        _this2.hide();
	      };

	      this.$close.on('click', this.$closeHandler);
	    }

	    /**
	     * show notification, if autoHide is true, hide box after hideIn timing config
	     */

	  }, {
	    key: 'show',
	    value: function show() {
	      var _this3 = this;

	      this.$box.addClass(classNames.show).removeClass(classNames.hide);

	      if (this.options.autoHide) {
	        window.setTimeout(function () {
	          _this3.hide();
	        }, this.options.hideIn);
	      }
	    }

	    /**
	     * hide notification and after hide animation finish, add display: none to element
	     */

	  }, {
	    key: 'hide',
	    value: function hide() {
	      var _this4 = this;

	      this.$box.removeClass(classNames.show).addClass(classNames.leave);

	      this.$box.on((0, _transitionend2.default)(), function () {
	        _this4.$box.addClass(classNames.hide).removeClass(classNames.enter).removeClass(classNames.leave);
	      });
	    }

	    /**
	     * Remove data from $element, unbind close button and remove box from DOM
	     */

	  }, {
	    key: 'destroy',
	    value: function destroy() {
	      this.$element.removeData(NAME);
	      this.$close.off('click', this.$closeHandler);
	      this.$box.remove();
	    }

	    /**
	     * Add notification class, append close button and message
	     */

	  }, {
	    key: '_createNotification',
	    value: function _createNotification() {
	      if (!this.options.dynamic) {
	        this.$box = this.$element;
	        this._createCloseButton();

	        return;
	      }

	      if (!this.options.message) {
	        return;
	      }

	      this.$box = (0, _jquery2.default)(templates.box);
	      this.$box.addClass(NAME + '-' + this.options.type);
	      this.$box.html(this.options.message);

	      this._createCloseButton();
	      this.$element.append(this.$box);
	    }
	  }, {
	    key: '_createCloseButton',
	    value: function _createCloseButton() {
	      if (!this.options.dynamic) {
	        this.$close = this.$box.find(this.options.closeButton);

	        return this.$close;
	      }

	      this.$close = (0, _jquery2.default)(templates.close);
	      this.$box.append(this.$close);
	    }
	  }]);

	  return Notification;
	}();

	/* istanbul ignore next */


	_jquery2.default.fn[NAME] = function (options) {
	  options = options || {};

	  return this.each(function () {
	    if (!_jquery2.default.data(this, NAME)) {
	      _jquery2.default.data(this, NAME, new Notification(this, options).init());
	    }
	  });
	};

	exports.default = Notification;

/***/ },
/* 13 */
/***/ function(module, exports) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	exports.default = function () {
	  var eventNames = {
	    WebkitTransition: 'webkitTransitionEnd',
	    MozTransition: 'transitionend',
	    OTransition: 'oTransitionEnd otransitionend',
	    msTransition: 'MsTransitionEnd',
	    transition: 'transitionend'
	  };

	  var el = document.createElement('div');

	  for (var transition in eventNames) {
	    if (el.style[transition] !== undefined) {
	      return eventNames[transition];
	    }
	  }
	};

/***/ },
/* 14 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _jquery = __webpack_require__(3);

	var _jquery2 = _interopRequireDefault(_jquery);

	var _scroll = __webpack_require__(15);

	var _scroll2 = _interopRequireDefault(_scroll);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	/**
	 * Scroll component. There is no need to create a new instance to it, since it won't listen to events,
	 * nor anything dynamic.
	 */
	var NAME = 'scroll';

	var DEFAULTS = {
	  duration: 500,
	  offset: -30
	};

	/* istanbul ignore next */
	_jquery2.default.fn[NAME] = function (options) {
	  options = options || {};

	  return this.each(function () {
	    (0, _scroll2.default)(this, _jquery2.default.extend({}, DEFAULTS, options || {}));
	  });
	};

/***/ },
/* 15 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.SCROLL = undefined;

	var _jquery = __webpack_require__(3);

	var _jquery2 = _interopRequireDefault(_jquery);

	var _jump = __webpack_require__(16);

	var _jump2 = _interopRequireDefault(_jump);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	/**
	 * Util responsible to handle animated scroll with the usage of a third party plugin called Jump.js.
	 */
	var SCROLL = new _jump2.default();

	/**
	 * Default scroll method
	 * @param  {element} el      The element to scroll to. Accepts both vanilla and $ selector
	 * @param  {object}  options The options available on Jump.js @method jump. Will extend from the DEFAULTS const.
	 */

	exports.default = function (el, options) {
	  return SCROLL.jump(el instanceof _jquery2.default ? el[0] : el, options);
	};

	exports.SCROLL = SCROLL;

/***/ },
/* 16 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _easing = __webpack_require__(17);

	var _easing2 = _interopRequireDefault(_easing);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	var Jump = function () {
	  function Jump() {
	    _classCallCheck(this, Jump);
	  }

	  _createClass(Jump, [{
	    key: 'jump',
	    value: function jump(target) {
	      var _this = this;

	      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

	      this.start = window.pageYOffset;

	      this.options = {
	        duration: options.duration,
	        offset: options.offset || 0,
	        callback: options.callback,
	        easing: options.easing || _easing2.default
	      };

	      this.target = typeof target === 'string' ? document.querySelector(target) : target;

	      this.distance = typeof target === 'number' ? target : this.options.offset + target.getBoundingClientRect().top;

	      this.duration = typeof this.options.duration === 'function' ? this.options.duration(this.distance) : this.options.duration;

	      requestAnimationFrame(function (time) {
	        return _this._loop(time);
	      });
	    }
	  }, {
	    key: '_loop',
	    value: function _loop(time) {
	      var _this2 = this;

	      if (!this.timeStart) {
	        this.timeStart = time;
	      }

	      this.timeElapsed = time - this.timeStart;
	      this.next = this.options.easing(this.timeElapsed, this.start, this.distance, this.duration);

	      window.scrollTo(0, this.next);

	      this.timeElapsed < this.duration ? requestAnimationFrame(function (time) {
	        return _this2._loop(time);
	      }) : this._end();
	    }
	  }, {
	    key: '_end',
	    value: function _end() {
	      window.scrollTo(0, this.start + this.distance);

	      typeof this.options.callback === 'function' && this.options.callback();
	      this.timeStart = false;
	    }
	  }]);

	  return Jump;
	}();

		exports.default = Jump;

/***/ },
/* 17 */
/***/ function(module, exports) {

	"use strict";

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	// Robert Penner's easeInOutQuad - http://robertpenner.com/easing/

	exports.default = function (t, b, c, d) {
	  t /= d / 2;
	  if (t < 1) return c / 2 * t * t + b;
	  t--;
	  return -c / 2 * (t * (t - 2) - 1) + b;
	};

/***/ },
/* 18 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _popper = __webpack_require__(19);

	var _popper2 = _interopRequireDefault(_popper);

	var _jquery = __webpack_require__(3);

	var _jquery2 = _interopRequireDefault(_jquery);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	var NAME = 'tooltip';

	var DEFAULTS = {
	  placement: 'top'
	};

	var Tooltip = function () {
	  function Tooltip(element) {
	    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

	    _classCallCheck(this, Tooltip);

	    this.$element = (0, _jquery2.default)(element);
	    this.$target = this._getTarget();
	    this.options = _jquery2.default.extend({}, DEFAULTS, options);
	  }

	  _createClass(Tooltip, [{
	    key: 'init',
	    value: function init() {
	      this._buildPopper();

	      return this;
	    }
	  }, {
	    key: '_getTarget',
	    value: function _getTarget() {
	      var targetName = this.$element.data(NAME);
	      return this.$element.find(targetName);
	    }
	  }, {
	    key: '_buildPopper',
	    value: function _buildPopper() {
	      return new _popper2.default(this.$element[0], this.$target[0], this.options);
	    }
	  }]);

	  return Tooltip;
	}();

	/* istanbul ignore next */


	_jquery2.default.fn[NAME] = function (options) {
	  options = options || {};

	  return this.each(function () {
	    if (!_jquery2.default.data(this, NAME)) {
	      _jquery2.default.data(this, NAME, new Tooltip(this, (0, _jquery2.default)(this).data()).init());
	    }
	  });
	};

	exports.default = Tooltip;

/***/ },
/* 19 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_RESULT__;'use strict';

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

	/**
	 * @fileOverview Kickass library to create and place poppers near their reference elements.
	 * @version {{version}}
	 * @license
	 * Copyright (c) 2016 Federico Zivolo and contributors
	 *
	 * Permission is hereby granted, free of charge, to any person obtaining a copy
	 * of this software and associated documentation files (the "Software"), to deal
	 * in the Software without restriction, including without limitation the rights
	 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	 * copies of the Software, and to permit persons to whom the Software is
	 * furnished to do so, subject to the following conditions:
	 *
	 * The above copyright notice and this permission notice shall be included in all
	 * copies or substantial portions of the Software.
	 *
	 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
	 * SOFTWARE.
	 */

	//
	// Cross module loader
	// Supported: Node, AMD, Browser globals
	//
	;(function (root, factory) {
	    if (true) {
	        // AMD. Register as an anonymous module.
	        !(__WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.call(exports, __webpack_require__, exports, module)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	    } else if ((typeof module === 'undefined' ? 'undefined' : _typeof(module)) === 'object' && module.exports) {
	        // Node. Does not work with strict CommonJS, but
	        // only CommonJS-like environments that support module.exports,
	        // like Node.
	        module.exports = factory();
	    } else {
	        // Browser globals (root is window)
	        root.Popper = factory();
	    }
	})(undefined, function () {

	    'use strict';

	    var root = window;

	    // default options
	    var DEFAULTS = {
	        // placement of the popper
	        placement: 'bottom',

	        gpuAcceleration: true,

	        // shift popper from its origin by the given amount of pixels (can be negative)
	        offset: 0,

	        // the element which will act as boundary of the popper
	        boundariesElement: 'viewport',

	        // amount of pixel used to define a minimum distance between the boundaries and the popper
	        boundariesPadding: 5,

	        // popper will try to prevent overflow following this order,
	        // by default, then, it could overflow on the left and on top of the boundariesElement
	        preventOverflowOrder: ['left', 'right', 'top', 'bottom'],

	        // the behavior used by flip to change the placement of the popper
	        flipBehavior: 'flip',

	        arrowElement: '[x-arrow]',

	        // list of functions used to modify the offsets before they are applied to the popper
	        modifiers: ['shift', 'offset', 'preventOverflow', 'keepTogether', 'arrow', 'flip', 'applyStyle'],

	        modifiersIgnored: []
	    };

	    /**
	     * Create a new Popper.js instance
	     * @constructor Popper
	     * @param {HTMLElement} reference - The reference element used to position the popper
	     * @param {HTMLElement|Object} popper
	     *      The HTML element used as popper, or a configuration used to generate the popper.
	     * @param {String} [popper.tagName='div'] The tag name of the generated popper.
	     * @param {Array} [popper.classNames=['popper']] Array of classes to apply to the generated popper.
	     * @param {Array} [popper.attributes] Array of attributes to apply, specify `attr:value` to assign a value to it.
	     * @param {HTMLElement|String} [popper.parent=window.document.body] The parent element, given as HTMLElement or as query string.
	     * @param {String} [popper.content=''] The content of the popper, it can be text, html, or node; if it is not text, set `contentType` to `html` or `node`.
	     * @param {String} [popper.contentType='text'] If `html`, the `content` will be parsed as HTML. If `node`, it will be appended as-is.
	     * @param {String} [popper.arrowTagName='div'] Same as `popper.tagName` but for the arrow element.
	     * @param {Array} [popper.arrowClassNames='popper__arrow'] Same as `popper.classNames` but for the arrow element.
	     * @param {String} [popper.arrowAttributes=['x-arrow']] Same as `popper.attributes` but for the arrow element.
	     * @param {Object} options
	     * @param {String} [options.placement=bottom]
	     *      Placement of the popper accepted values: `top(-start, -end), right(-start, -end), bottom(-start, -right),
	     *      left(-start, -end)`
	     *
	     * @param {HTMLElement|String} [options.arrowElement='[x-arrow]']
	     *      The DOM Node used as arrow for the popper, or a CSS selector used to get the DOM node. It must be child of
	     *      its parent Popper. Popper.js will apply to the given element the style required to align the arrow with its
	     *      reference element.
	     *      By default, it will look for a child node of the popper with the `x-arrow` attribute.
	     *
	     * @param {Boolean} [options.gpuAcceleration=true]
	     *      When this property is set to true, the popper position will be applied using CSS3 translate3d, allowing the
	     *      browser to use the GPU to accelerate the rendering.
	     *      If set to false, the popper will be placed using `top` and `left` properties, not using the GPU.
	     *
	     * @param {Number} [options.offset=0]
	     *      Amount of pixels the popper will be shifted (can be negative).
	     *
	     * @param {String|Element} [options.boundariesElement='viewport']
	     *      The element which will define the boundaries of the popper position, the popper will never be placed outside
	     *      of the defined boundaries (except if `keepTogether` is enabled)
	     *
	     * @param {Number} [options.boundariesPadding=5]
	     *      Additional padding for the boundaries
	     *
	     * @param {Array} [options.preventOverflowOrder=['left', 'right', 'top', 'bottom']]
	     *      Order used when Popper.js tries to avoid overflows from the boundaries, they will be checked in order,
	     *      this means that the last ones will never overflow
	     *
	     * @param {String|Array} [options.flipBehavior='flip']
	     *      The behavior used by the `flip` modifier to change the placement of the popper when the latter is trying to
	     *      overlap its reference element. Defining `flip` as value, the placement will be flipped on
	     *      its axis (`right - left`, `top - bottom`).
	     *      You can even pass an array of placements (eg: `['right', 'left', 'top']` ) to manually specify
	     *      how alter the placement when a flip is needed. (eg. in the above example, it would first flip from right to left,
	     *      then, if even in its new placement, the popper is overlapping its reference element, it will be moved to top)
	     *
	     * @param {Array} [options.modifiers=[ 'shift', 'offset', 'preventOverflow', 'keepTogether', 'arrow', 'flip', 'applyStyle']]
	     *      List of functions used to modify the data before they are applied to the popper, add your custom functions
	     *      to this array to edit the offsets and placement.
	     *      The function should reflect the @params and @returns of preventOverflow
	     *
	     * @param {Array} [options.modifiersIgnored=[]]
	     *      Put here any built-in modifier name you want to exclude from the modifiers list
	     *      The function should reflect the @params and @returns of preventOverflow
	     *
	     * @param {Boolean} [options.removeOnDestroy=false]
	     *      Set to true if you want to automatically remove the popper when you call the `destroy` method.
	     */
	    function Popper(reference, popper, options) {
	        this._reference = reference.jquery ? reference[0] : reference;
	        this.state = {};

	        // if the popper variable is a configuration object, parse it to generate an HTMLElement
	        // generate a default popper if is not defined
	        var isNotDefined = typeof popper === 'undefined' || popper === null;
	        var isConfig = popper && Object.prototype.toString.call(popper) === '[object Object]';
	        if (isNotDefined || isConfig) {
	            this._popper = this.parse(isConfig ? popper : {});
	        }
	        // otherwise, use the given HTMLElement as popper
	        else {
	                this._popper = popper.jquery ? popper[0] : popper;
	            }

	        // with {} we create a new object with the options inside it
	        this._options = Object.assign({}, DEFAULTS, options);

	        // refactoring modifiers' list
	        this._options.modifiers = this._options.modifiers.map(function (modifier) {
	            // remove ignored modifiers
	            if (this._options.modifiersIgnored.indexOf(modifier) !== -1) return;

	            // set the x-placement attribute before everything else because it could be used to add margins to the popper
	            // margins needs to be calculated to get the correct popper offsets
	            if (modifier === 'applyStyle') {
	                this._popper.setAttribute('x-placement', this._options.placement);
	            }

	            // return predefined modifier identified by string or keep the custom one
	            return this.modifiers[modifier] || modifier;
	        }.bind(this));

	        // make sure to apply the popper position before any computation
	        this.state.position = this._getPosition(this._popper, this._reference);
	        setStyle(this._popper, { position: this.state.position });

	        // determine how we should set the origin of offsets
	        this.state.isParentTransformed = this._getIsParentTransformed(this._popper);

	        // fire the first update to position the popper in the right place
	        this.update();

	        // setup event listeners, they will take care of update the position in specific situations
	        this._setupEventListeners();
	        return this;
	    }

	    //
	    // Methods
	    //
	    /**
	     * Destroy the popper
	     * @method
	     * @memberof Popper
	     */
	    Popper.prototype.destroy = function () {
	        this._popper.removeAttribute('x-placement');
	        this._popper.style.left = '';
	        this._popper.style.position = '';
	        this._popper.style.top = '';
	        this._popper.style[getSupportedPropertyName('transform')] = '';
	        this._removeEventListeners();

	        // remove the popper if user explicity asked for the deletion on destroy
	        if (this._options.removeOnDestroy) {
	            this._popper.remove();
	        }
	        return this;
	    };

	    /**
	     * Updates the position of the popper, computing the new offsets and applying the new style
	     * @method
	     * @memberof Popper
	     */
	    Popper.prototype.update = function () {
	        var data = { instance: this, styles: {} };

	        // store placement inside the data object, modifiers will be able to edit `placement` if needed
	        // and refer to _originalPlacement to know the original value
	        data.placement = this._options.placement;
	        data._originalPlacement = this._options.placement;

	        // compute the popper and reference offsets and put them inside data.offsets
	        data.offsets = this._getOffsets(this._popper, this._reference, data.placement);

	        // get boundaries
	        data.boundaries = this._getBoundaries(data, this._options.boundariesPadding, this._options.boundariesElement);

	        data = this.runModifiers(data, this._options.modifiers);

	        if (typeof this.state.updateCallback === 'function') {
	            this.state.updateCallback(data);
	        }
	    };

	    /**
	     * If a function is passed, it will be executed after the initialization of popper with as first argument the Popper instance.
	     * @method
	     * @memberof Popper
	     * @param {Function} callback
	     */
	    Popper.prototype.onCreate = function (callback) {
	        // the createCallbacks return as first argument the popper instance
	        callback(this);
	        return this;
	    };

	    /**
	     * If a function is passed, it will be executed after each update of popper with as first argument the set of coordinates and informations
	     * used to style popper and its arrow.
	     * NOTE: it doesn't get fired on the first call of the `Popper.update()` method inside the `Popper` constructor!
	     * @method
	     * @memberof Popper
	     * @param {Function} callback
	     */
	    Popper.prototype.onUpdate = function (callback) {
	        this.state.updateCallback = callback;
	        return this;
	    };

	    /**
	     * Helper used to generate poppers from a configuration file
	     * @method
	     * @memberof Popper
	     * @param config {Object} configuration
	     * @returns {HTMLElement} popper
	     */
	    Popper.prototype.parse = function (config) {
	        var defaultConfig = {
	            tagName: 'div',
	            classNames: ['popper'],
	            attributes: [],
	            parent: root.document.body,
	            content: '',
	            contentType: 'text',
	            arrowTagName: 'div',
	            arrowClassNames: ['popper__arrow'],
	            arrowAttributes: ['x-arrow']
	        };
	        config = Object.assign({}, defaultConfig, config);

	        var d = root.document;

	        var popper = d.createElement(config.tagName);
	        addClassNames(popper, config.classNames);
	        addAttributes(popper, config.attributes);
	        if (config.contentType === 'node') {
	            popper.appendChild(config.content.jquery ? config.content[0] : config.content);
	        } else if (config.contentType === 'html') {
	            popper.innerHTML = config.content;
	        } else {
	            popper.textContent = config.content;
	        }

	        if (config.arrowTagName) {
	            var arrow = d.createElement(config.arrowTagName);
	            addClassNames(arrow, config.arrowClassNames);
	            addAttributes(arrow, config.arrowAttributes);
	            popper.appendChild(arrow);
	        }

	        var parent = config.parent.jquery ? config.parent[0] : config.parent;

	        // if the given parent is a string, use it to match an element
	        // if more than one element is matched, the first one will be used as parent
	        // if no elements are matched, the script will throw an error
	        if (typeof parent === 'string') {
	            parent = d.querySelectorAll(config.parent);
	            if (parent.length > 1) {
	                console.warn('WARNING: the given `parent` query(' + config.parent + ') matched more than one element, the first one will be used');
	            }
	            if (parent.length === 0) {
	                throw 'ERROR: the given `parent` doesn\'t exists!';
	            }
	            parent = parent[0];
	        }
	        // if the given parent is a DOM nodes list or an array of nodes with more than one element,
	        // the first one will be used as parent
	        if (parent.length > 1 && parent instanceof Element === false) {
	            console.warn('WARNING: you have passed as parent a list of elements, the first one will be used');
	            parent = parent[0];
	        }

	        // append the generated popper to its parent
	        parent.appendChild(popper);

	        return popper;

	        /**
	         * Adds class names to the given element
	         * @function
	         * @ignore
	         * @param {HTMLElement} target
	         * @param {Array} classes
	         */
	        function addClassNames(element, classNames) {
	            classNames.forEach(function (className) {
	                element.classList.add(className);
	            });
	        }

	        /**
	         * Adds attributes to the given element
	         * @function
	         * @ignore
	         * @param {HTMLElement} target
	         * @param {Array} attributes
	         * @example
	         * addAttributes(element, [ 'data-info:foobar' ]);
	         */
	        function addAttributes(element, attributes) {
	            attributes.forEach(function (attribute) {
	                element.setAttribute(attribute.split(':')[0], attribute.split(':')[1] || '');
	            });
	        }
	    };

	    /**
	     * Helper used to get the position which will be applied to the popper
	     * @method
	     * @memberof Popper
	     * @param config {HTMLElement} popper element
	     * @returns {HTMLElement} reference element
	     */
	    Popper.prototype._getPosition = function (popper, reference) {
	        var container = getOffsetParent(reference);

	        // Decide if the popper will be fixed
	        // If the reference element is inside a fixed context, the popper will be fixed as well to allow them to scroll together
	        var isParentFixed = isFixed(reference, container);
	        return isParentFixed ? 'fixed' : 'absolute';
	    };

	    /**
	     * Helper used to determine if the popper's parent is transformed.
	     * @param  {[type]} popper [description]
	     * @return {[type]}        [description]
	     */
	    Popper.prototype._getIsParentTransformed = function (popper) {
	        return isTransformed(popper.parentNode);
	    };

	    /**
	     * Get offsets to the popper
	     * @method
	     * @memberof Popper
	     * @access private
	     * @param {Element} popper - the popper element
	     * @param {Element} reference - the reference element (the popper will be relative to this)
	     * @returns {Object} An object containing the offsets which will be applied to the popper
	     */
	    Popper.prototype._getOffsets = function (popper, reference, placement) {
	        placement = placement.split('-')[0];
	        var popperOffsets = {};

	        popperOffsets.position = this.state.position;
	        var isParentFixed = popperOffsets.position === 'fixed';

	        var isParentTransformed = this.state.isParentTransformed;

	        //
	        // Get reference element position
	        //
	        var offsetParent = isParentFixed && isParentTransformed ? getOffsetParent(reference) : getOffsetParent(popper);
	        var referenceOffsets = getOffsetRectRelativeToCustomParent(reference, offsetParent, isParentFixed, isParentTransformed);

	        //
	        // Get popper sizes
	        //
	        var popperRect = getOuterSizes(popper);

	        //
	        // Compute offsets of popper
	        //

	        // depending by the popper placement we have to compute its offsets slightly differently
	        if (['right', 'left'].indexOf(placement) !== -1) {
	            popperOffsets.top = referenceOffsets.top + referenceOffsets.height / 2 - popperRect.height / 2;
	            if (placement === 'left') {
	                popperOffsets.left = referenceOffsets.left - popperRect.width;
	            } else {
	                popperOffsets.left = referenceOffsets.right;
	            }
	        } else {
	            popperOffsets.left = referenceOffsets.left + referenceOffsets.width / 2 - popperRect.width / 2;
	            if (placement === 'top') {
	                popperOffsets.top = referenceOffsets.top - popperRect.height;
	            } else {
	                popperOffsets.top = referenceOffsets.bottom;
	            }
	        }

	        // Add width and height to our offsets object
	        popperOffsets.width = popperRect.width;
	        popperOffsets.height = popperRect.height;

	        return {
	            popper: popperOffsets,
	            reference: referenceOffsets
	        };
	    };

	    /**
	     * Setup needed event listeners used to update the popper position
	     * @method
	     * @memberof Popper
	     * @access private
	     */
	    Popper.prototype._setupEventListeners = function () {
	        // NOTE: 1 DOM access here
	        this.state.updateBound = this.update.bind(this);
	        root.addEventListener('resize', this.state.updateBound);
	        // if the boundariesElement is window we don't need to listen for the scroll event
	        if (this._options.boundariesElement !== 'window') {
	            var target = getScrollParent(this._reference);
	            // here it could be both `body` or `documentElement` thanks to Firefox, we then check both
	            if (target === root.document.body || target === root.document.documentElement) {
	                target = root;
	            }
	            target.addEventListener('scroll', this.state.updateBound);
	        }
	    };

	    /**
	     * Remove event listeners used to update the popper position
	     * @method
	     * @memberof Popper
	     * @access private
	     */
	    Popper.prototype._removeEventListeners = function () {
	        // NOTE: 1 DOM access here
	        root.removeEventListener('resize', this.state.updateBound);
	        if (this._options.boundariesElement !== 'window') {
	            var target = getScrollParent(this._reference);
	            // here it could be both `body` or `documentElement` thanks to Firefox, we then check both
	            if (target === root.document.body || target === root.document.documentElement) {
	                target = root;
	            }
	            target.removeEventListener('scroll', this.state.updateBound);
	        }
	        this.state.updateBound = null;
	    };

	    /**
	     * Computed the boundaries limits and return them
	     * @method
	     * @memberof Popper
	     * @access private
	     * @param {Object} data - Object containing the property "offsets" generated by `_getOffsets`
	     * @param {Number} padding - Boundaries padding
	     * @param {Element} boundariesElement - Element used to define the boundaries
	     * @returns {Object} Coordinates of the boundaries
	     */
	    Popper.prototype._getBoundaries = function (data, padding, boundariesElement) {
	        // NOTE: 1 DOM access here
	        var boundaries = {};
	        var width, height;
	        if (boundariesElement === 'window') {
	            var body = root.document.body,
	                html = root.document.documentElement;

	            height = Math.max(body.scrollHeight, body.offsetHeight, html.clientHeight, html.scrollHeight, html.offsetHeight);
	            width = Math.max(body.scrollWidth, body.offsetWidth, html.clientWidth, html.scrollWidth, html.offsetWidth);

	            boundaries = {
	                top: 0,
	                right: width,
	                bottom: height,
	                left: 0
	            };
	        } else if (boundariesElement === 'viewport') {
	            var offsetParent = getOffsetParent(this._popper);
	            var scrollParent = getScrollParent(this._popper);
	            var offsetParentRect = getOffsetRect(offsetParent);

	            // if the popper is fixed we don't have to substract scrolling from the boundaries
	            var scrollTop = data.offsets.popper.position === 'fixed' ? 0 : scrollParent.scrollTop;
	            var scrollLeft = data.offsets.popper.position === 'fixed' ? 0 : scrollParent.scrollLeft;

	            boundaries = {
	                top: 0 - (offsetParentRect.top - scrollTop),
	                right: root.document.documentElement.clientWidth - (offsetParentRect.left - scrollLeft),
	                bottom: root.document.documentElement.clientHeight - (offsetParentRect.top - scrollTop),
	                left: 0 - (offsetParentRect.left - scrollLeft)
	            };
	        } else {
	            if (getOffsetParent(this._popper) === boundariesElement) {
	                boundaries = {
	                    top: 0,
	                    left: 0,
	                    right: boundariesElement.clientWidth,
	                    bottom: boundariesElement.clientHeight
	                };
	            } else {
	                boundaries = getOffsetRect(boundariesElement);
	            }
	        }
	        boundaries.left += padding;
	        boundaries.right -= padding;
	        boundaries.top = boundaries.top + padding;
	        boundaries.bottom = boundaries.bottom - padding;
	        return boundaries;
	    };

	    /**
	     * Loop trough the list of modifiers and run them in order, each of them will then edit the data object
	     * @method
	     * @memberof Popper
	     * @access public
	     * @param {Object} data
	     * @param {Array} modifiers
	     * @param {Function} ends
	     */
	    Popper.prototype.runModifiers = function (data, modifiers, ends) {
	        var modifiersToRun = modifiers.slice();
	        if (ends !== undefined) {
	            modifiersToRun = this._options.modifiers.slice(0, getArrayKeyIndex(this._options.modifiers, ends));
	        }

	        modifiersToRun.forEach(function (modifier) {
	            if (isFunction(modifier)) {
	                data = modifier.call(this, data);
	            }
	        }.bind(this));

	        return data;
	    };

	    /**
	     * Helper used to know if the given modifier depends from another one.
	     * @method
	     * @memberof Popper
	     * @returns {Boolean}
	     */

	    Popper.prototype.isModifierRequired = function (requesting, requested) {
	        var index = getArrayKeyIndex(this._options.modifiers, requesting);
	        return !!this._options.modifiers.slice(0, index).filter(function (modifier) {
	            return modifier === requested;
	        }).length;
	    };

	    //
	    // Modifiers
	    //

	    /**
	     * Modifiers list
	     * @namespace Popper.modifiers
	     * @memberof Popper
	     * @type {Object}
	     */
	    Popper.prototype.modifiers = {};

	    /**
	     * Apply the computed styles to the popper element
	     * @method
	     * @memberof Popper.modifiers
	     * @argument {Object} data - The data object generated by `update` method
	     * @returns {Object} The same data object
	     */
	    Popper.prototype.modifiers.applyStyle = function (data) {
	        // apply the final offsets to the popper
	        // NOTE: 1 DOM access here
	        var styles = {
	            position: data.offsets.popper.position
	        };

	        // round top and left to avoid blurry text
	        var left = Math.round(data.offsets.popper.left);
	        var top = Math.round(data.offsets.popper.top);

	        // if gpuAcceleration is set to true and transform is supported, we use `translate3d` to apply the position to the popper
	        // we automatically use the supported prefixed version if needed
	        var prefixedProperty;
	        if (this._options.gpuAcceleration && (prefixedProperty = getSupportedPropertyName('transform'))) {
	            styles[prefixedProperty] = 'translate3d(' + left + 'px, ' + top + 'px, 0)';
	            styles.top = 0;
	            styles.left = 0;
	        }
	        // othwerise, we use the standard `left` and `top` properties
	        else {
	                styles.left = left;
	                styles.top = top;
	            }

	        // any property present in `data.styles` will be applied to the popper,
	        // in this way we can make the 3rd party modifiers add custom styles to it
	        // Be aware, modifiers could override the properties defined in the previous
	        // lines of this modifier!
	        Object.assign(styles, data.styles);

	        setStyle(this._popper, styles);

	        // set an attribute which will be useful to style the tooltip (use it to properly position its arrow)
	        // NOTE: 1 DOM access here
	        this._popper.setAttribute('x-placement', data.placement);

	        // if the arrow modifier is required and the arrow style has been computed, apply the arrow style
	        if (this.isModifierRequired(this.modifiers.applyStyle, this.modifiers.arrow) && data.offsets.arrow) {
	            setStyle(data.arrowElement, data.offsets.arrow);
	        }

	        return data;
	    };

	    /**
	     * Modifier used to shift the popper on the start or end of its reference element side
	     * @method
	     * @memberof Popper.modifiers
	     * @argument {Object} data - The data object generated by `update` method
	     * @returns {Object} The data object, properly modified
	     */
	    Popper.prototype.modifiers.shift = function (data) {
	        var placement = data.placement;
	        var basePlacement = placement.split('-')[0];
	        var shiftVariation = placement.split('-')[1];

	        // if shift shiftVariation is specified, run the modifier
	        if (shiftVariation) {
	            var reference = data.offsets.reference;
	            var popper = getPopperClientRect(data.offsets.popper);

	            var shiftOffsets = {
	                y: {
	                    start: { top: reference.top },
	                    end: { top: reference.top + reference.height - popper.height }
	                },
	                x: {
	                    start: { left: reference.left },
	                    end: { left: reference.left + reference.width - popper.width }
	                }
	            };

	            var axis = ['bottom', 'top'].indexOf(basePlacement) !== -1 ? 'x' : 'y';

	            data.offsets.popper = Object.assign(popper, shiftOffsets[axis][shiftVariation]);
	        }

	        return data;
	    };

	    /**
	     * Modifier used to make sure the popper does not overflows from it's boundaries
	     * @method
	     * @memberof Popper.modifiers
	     * @argument {Object} data - The data object generated by `update` method
	     * @returns {Object} The data object, properly modified
	     */
	    Popper.prototype.modifiers.preventOverflow = function (data) {
	        var order = this._options.preventOverflowOrder;
	        var popper = getPopperClientRect(data.offsets.popper);

	        var check = {
	            left: function left() {
	                var left = popper.left;
	                if (popper.left < data.boundaries.left) {
	                    left = Math.max(popper.left, data.boundaries.left);
	                }
	                return { left: left };
	            },
	            right: function right() {
	                var left = popper.left;
	                if (popper.right > data.boundaries.right) {
	                    left = Math.min(popper.left, data.boundaries.right - popper.width);
	                }
	                return { left: left };
	            },
	            top: function top() {
	                var top = popper.top;
	                if (popper.top < data.boundaries.top) {
	                    top = Math.max(popper.top, data.boundaries.top);
	                }
	                return { top: top };
	            },
	            bottom: function bottom() {
	                var top = popper.top;
	                if (popper.bottom > data.boundaries.bottom) {
	                    top = Math.min(popper.top, data.boundaries.bottom - popper.height);
	                }
	                return { top: top };
	            }
	        };

	        order.forEach(function (direction) {
	            data.offsets.popper = Object.assign(popper, check[direction]());
	        });

	        return data;
	    };

	    /**
	     * Modifier used to make sure the popper is always near its reference
	     * @method
	     * @memberof Popper.modifiers
	     * @argument {Object} data - The data object generated by _update method
	     * @returns {Object} The data object, properly modified
	     */
	    Popper.prototype.modifiers.keepTogether = function (data) {
	        var popper = getPopperClientRect(data.offsets.popper);
	        var reference = data.offsets.reference;
	        var f = Math.floor;

	        if (popper.right < f(reference.left)) {
	            data.offsets.popper.left = f(reference.left) - popper.width;
	        }
	        if (popper.left > f(reference.right)) {
	            data.offsets.popper.left = f(reference.right);
	        }
	        if (popper.bottom < f(reference.top)) {
	            data.offsets.popper.top = f(reference.top) - popper.height;
	        }
	        if (popper.top > f(reference.bottom)) {
	            data.offsets.popper.top = f(reference.bottom);
	        }

	        return data;
	    };

	    /**
	     * Modifier used to flip the placement of the popper when the latter is starting overlapping its reference element.
	     * Requires the `preventOverflow` modifier before it in order to work.
	     * **NOTE:** This modifier will run all its previous modifiers everytime it tries to flip the popper!
	     * @method
	     * @memberof Popper.modifiers
	     * @argument {Object} data - The data object generated by _update method
	     * @returns {Object} The data object, properly modified
	     */
	    Popper.prototype.modifiers.flip = function (data) {
	        // check if preventOverflow is in the list of modifiers before the flip modifier.
	        // otherwise flip would not work as expected.
	        if (!this.isModifierRequired(this.modifiers.flip, this.modifiers.preventOverflow)) {
	            console.warn('WARNING: preventOverflow modifier is required by flip modifier in order to work, be sure to include it before flip!');
	            return data;
	        }

	        if (data.flipped && data.placement === data._originalPlacement) {
	            // seems like flip is trying to loop, probably there's not enough space on any of the flippable sides
	            return data;
	        }

	        var placement = data.placement.split('-')[0];
	        var placementOpposite = getOppositePlacement(placement);
	        var variation = data.placement.split('-')[1] || '';

	        var flipOrder = [];
	        if (this._options.flipBehavior === 'flip') {
	            flipOrder = [placement, placementOpposite];
	        } else {
	            flipOrder = this._options.flipBehavior;
	        }

	        flipOrder.forEach(function (step, index) {
	            if (placement !== step || flipOrder.length === index + 1) {
	                return;
	            }

	            placement = data.placement.split('-')[0];
	            placementOpposite = getOppositePlacement(placement);

	            var popperOffsets = getPopperClientRect(data.offsets.popper);

	            // this boolean is used to distinguish right and bottom from top and left
	            // they need different computations to get flipped
	            var a = ['right', 'bottom'].indexOf(placement) !== -1;

	            // using Math.floor because the reference offsets may contain decimals we are not going to consider here
	            if (a && Math.floor(data.offsets.reference[placement]) > Math.floor(popperOffsets[placementOpposite]) || !a && Math.floor(data.offsets.reference[placement]) < Math.floor(popperOffsets[placementOpposite])) {
	                // we'll use this boolean to detect any flip loop
	                data.flipped = true;
	                data.placement = flipOrder[index + 1];
	                if (variation) {
	                    data.placement += '-' + variation;
	                }
	                data.offsets.popper = this._getOffsets(this._popper, this._reference, data.placement).popper;

	                data = this.runModifiers(data, this._options.modifiers, this._flip);
	            }
	        }.bind(this));
	        return data;
	    };

	    /**
	     * Modifier used to add an offset to the popper, useful if you more granularity positioning your popper.
	     * The offsets will shift the popper on the side of its reference element.
	     * @method
	     * @memberof Popper.modifiers
	     * @argument {Object} data - The data object generated by _update method
	     * @returns {Object} The data object, properly modified
	     */
	    Popper.prototype.modifiers.offset = function (data) {
	        var offset = this._options.offset;
	        var popper = data.offsets.popper;

	        if (data.placement.indexOf('left') !== -1) {
	            popper.top -= offset;
	        } else if (data.placement.indexOf('right') !== -1) {
	            popper.top += offset;
	        } else if (data.placement.indexOf('top') !== -1) {
	            popper.left -= offset;
	        } else if (data.placement.indexOf('bottom') !== -1) {
	            popper.left += offset;
	        }
	        return data;
	    };

	    /**
	     * Modifier used to move the arrows on the edge of the popper to make sure them are always between the popper and the reference element
	     * It will use the CSS outer size of the arrow element to know how many pixels of conjuction are needed
	     * @method
	     * @memberof Popper.modifiers
	     * @argument {Object} data - The data object generated by _update method
	     * @returns {Object} The data object, properly modified
	     */
	    Popper.prototype.modifiers.arrow = function (data) {
	        var arrow = this._options.arrowElement;

	        // if the arrowElement is a string, suppose it's a CSS selector
	        if (typeof arrow === 'string') {
	            arrow = this._popper.querySelector(arrow);
	        }

	        // if arrow element is not found, don't run the modifier
	        if (!arrow) {
	            return data;
	        }

	        // the arrow element must be child of its popper
	        if (!this._popper.contains(arrow)) {
	            console.warn('WARNING: `arrowElement` must be child of its popper element!');
	            return data;
	        }

	        // arrow depends on keepTogether in order to work
	        if (!this.isModifierRequired(this.modifiers.arrow, this.modifiers.keepTogether)) {
	            console.warn('WARNING: keepTogether modifier is required by arrow modifier in order to work, be sure to include it before arrow!');
	            return data;
	        }

	        var arrowStyle = {};
	        var placement = data.placement.split('-')[0];
	        var popper = getPopperClientRect(data.offsets.popper);
	        var reference = data.offsets.reference;
	        var isVertical = ['left', 'right'].indexOf(placement) !== -1;

	        var len = isVertical ? 'height' : 'width';
	        var side = isVertical ? 'top' : 'left';
	        var altSide = isVertical ? 'left' : 'top';
	        var opSide = isVertical ? 'bottom' : 'right';
	        var arrowSize = getOuterSizes(arrow)[len];

	        //
	        // extends keepTogether behavior making sure the popper and its reference have enough pixels in conjuction
	        //

	        // top/left side
	        if (reference[opSide] - arrowSize < popper[side]) {
	            data.offsets.popper[side] -= popper[side] - (reference[opSide] - arrowSize);
	        }
	        // bottom/right side
	        if (reference[side] + arrowSize > popper[opSide]) {
	            data.offsets.popper[side] += reference[side] + arrowSize - popper[opSide];
	        }

	        // compute center of the popper
	        var center = reference[side] + reference[len] / 2 - arrowSize / 2;

	        // Compute the sideValue using the updated popper offsets
	        var sideValue = center - getPopperClientRect(data.offsets.popper)[side];

	        // prevent arrow from being placed not contiguously to its popper
	        sideValue = Math.max(Math.min(popper[len] - arrowSize, sideValue), 0);
	        arrowStyle[side] = sideValue;
	        arrowStyle[altSide] = ''; // make sure to remove any old style from the arrow

	        data.offsets.arrow = arrowStyle;
	        data.arrowElement = arrow;

	        return data;
	    };

	    //
	    // Helpers
	    //

	    /**
	     * Get the outer sizes of the given element (offset size + margins)
	     * @function
	     * @ignore
	     * @argument {Element} element
	     * @returns {Object} object containing width and height properties
	     */
	    function getOuterSizes(element) {
	        // NOTE: 1 DOM access here
	        var _display = element.style.display,
	            _visibility = element.style.visibility;
	        element.style.display = 'block';element.style.visibility = 'hidden';
	        var calcWidthToForceRepaint = element.offsetWidth;

	        // original method
	        var styles = root.getComputedStyle(element);
	        var x = parseFloat(styles.marginTop) + parseFloat(styles.marginBottom);
	        var y = parseFloat(styles.marginLeft) + parseFloat(styles.marginRight);
	        var result = { width: element.offsetWidth + y, height: element.offsetHeight + x };

	        // reset element styles
	        element.style.display = _display;element.style.visibility = _visibility;
	        return result;
	    }

	    /**
	     * Get the opposite placement of the given one/
	     * @function
	     * @ignore
	     * @argument {String} placement
	     * @returns {String} flipped placement
	     */
	    function getOppositePlacement(placement) {
	        var hash = { left: 'right', right: 'left', bottom: 'top', top: 'bottom' };
	        return placement.replace(/left|right|bottom|top/g, function (matched) {
	            return hash[matched];
	        });
	    }

	    /**
	     * Given the popper offsets, generate an output similar to getBoundingClientRect
	     * @function
	     * @ignore
	     * @argument {Object} popperOffsets
	     * @returns {Object} ClientRect like output
	     */
	    function getPopperClientRect(popperOffsets) {
	        var offsets = Object.assign({}, popperOffsets);
	        offsets.right = offsets.left + offsets.width;
	        offsets.bottom = offsets.top + offsets.height;
	        return offsets;
	    }

	    /**
	     * Given an array and the key to find, returns its index
	     * @function
	     * @ignore
	     * @argument {Array} arr
	     * @argument keyToFind
	     * @returns index or null
	     */
	    function getArrayKeyIndex(arr, keyToFind) {
	        var i = 0,
	            key;
	        for (key in arr) {
	            if (arr[key] === keyToFind) {
	                return i;
	            }
	            i++;
	        }
	        return null;
	    }

	    /**
	     * Get CSS computed property of the given element
	     * @function
	     * @ignore
	     * @argument {Eement} element
	     * @argument {String} property
	     */
	    function getStyleComputedProperty(element, property) {
	        // NOTE: 1 DOM access here
	        var css = root.getComputedStyle(element, null);
	        return css[property];
	    }

	    /**
	     * Returns the offset parent of the given element
	     * @function
	     * @ignore
	     * @argument {Element} element
	     * @returns {Element} offset parent
	     */
	    function getOffsetParent(element) {
	        // NOTE: 1 DOM access here
	        var offsetParent = element.offsetParent;
	        return offsetParent === root.document.body || !offsetParent ? root.document.documentElement : offsetParent;
	    }

	    /**
	     * Returns the scrolling parent of the given element
	     * @function
	     * @ignore
	     * @argument {Element} element
	     * @returns {Element} offset parent
	     */
	    function getScrollParent(element) {
	        if (element === root.document) {
	            // Firefox puts the scrollTOp value on `documentElement` instead of `body`, we then check which of them is
	            // greater than 0 and return the proper element
	            if (root.document.body.scrollTop) {
	                return root.document.body;
	            } else {
	                return root.document.documentElement;
	            }
	        }

	        // Firefox want us to check `-x` and `-y` variations as well
	        if (['scroll', 'auto'].indexOf(getStyleComputedProperty(element, 'overflow')) !== -1 || ['scroll', 'auto'].indexOf(getStyleComputedProperty(element, 'overflow-x')) !== -1 || ['scroll', 'auto'].indexOf(getStyleComputedProperty(element, 'overflow-y')) !== -1) {
	            // If the detected scrollParent is body, we perform an additional check on its parentNode
	            // in this way we'll get body if the browser is Chrome-ish, or documentElement otherwise
	            // fixes issue #65
	            return element === root.document.body ? getScrollParent(element.parentNode) : element;
	        }
	        return element.parentNode ? getScrollParent(element.parentNode) : element;
	    }

	    /**
	     * Check if the given element is fixed or is inside a fixed parent
	     * @function
	     * @ignore
	     * @argument {Element} element
	     * @argument {Element} customContainer
	     * @returns {Boolean} answer to "isFixed?"
	     */
	    function isFixed(element) {
	        if (element === root.document.body) {
	            return false;
	        }
	        if (getStyleComputedProperty(element, 'position') === 'fixed') {
	            return true;
	        }
	        return element.parentNode ? isFixed(element.parentNode) : element;
	    }

	    /**
	     * Check if the given element has transforms applied to itself or a parent
	     * @param  {Element} element
	     * @return {Boolean} answer to "isTransformed?"
	     */
	    function isTransformed(element) {
	        if (element === root.document.body) {
	            return false;
	        }
	        if (getStyleComputedProperty(element, 'transform') !== 'none') {
	            return true;
	        }
	        return element.parentNode ? isTransformed(element.parentNode) : element;
	    }

	    /**
	     * Set the style to the given popper
	     * @function
	     * @ignore
	     * @argument {Element} element - Element to apply the style to
	     * @argument {Object} styles - Object with a list of properties and values which will be applied to the element
	     */
	    function setStyle(element, styles) {
	        function is_numeric(n) {
	            return n !== '' && !isNaN(parseFloat(n)) && isFinite(n);
	        }
	        Object.keys(styles).forEach(function (prop) {
	            var unit = '';
	            // add unit if the value is numeric and is one of the following
	            if (['width', 'height', 'top', 'right', 'bottom', 'left'].indexOf(prop) !== -1 && is_numeric(styles[prop])) {
	                unit = 'px';
	            }
	            element.style[prop] = styles[prop] + unit;
	        });
	    }

	    /**
	     * Check if the given variable is a function
	     * @function
	     * @ignore
	     * @argument {Element} element - Element to check
	     * @returns {Boolean} answer to: is a function?
	     */
	    function isFunction(functionToCheck) {
	        var getType = {};
	        return functionToCheck && getType.toString.call(functionToCheck) === '[object Function]';
	    }

	    /**
	     * Get the position of the given element, relative to its offset parent
	     * @function
	     * @ignore
	     * @param {Element} element
	     * @return {Object} position - Coordinates of the element and its `scrollTop`
	     */
	    function getOffsetRect(element) {
	        var elementRect = {
	            width: element.offsetWidth,
	            height: element.offsetHeight,
	            left: element.offsetLeft,
	            top: element.offsetTop
	        };

	        elementRect.right = elementRect.left + elementRect.width;
	        elementRect.bottom = elementRect.top + elementRect.height;

	        // position
	        return elementRect;
	    }

	    /**
	     * Get bounding client rect of given element
	     * @function
	     * @ignore
	     * @param {HTMLElement} element
	     * @return {Object} client rect
	     */
	    function getBoundingClientRect(element) {
	        var rect = element.getBoundingClientRect();
	        return {
	            left: rect.left,
	            top: rect.top,
	            right: rect.right,
	            bottom: rect.bottom,
	            width: rect.right - rect.left,
	            height: rect.bottom - rect.top
	        };
	    }

	    /**
	     * Given an element and one of its parents, return the offset
	     * @function
	     * @ignore
	     * @param {HTMLElement} element
	     * @param {HTMLElement} parent
	     * @return {Object} rect
	     */
	    function getOffsetRectRelativeToCustomParent(element, parent, fixed, transformed) {
	        var elementRect = getBoundingClientRect(element);
	        var parentRect = getBoundingClientRect(parent);

	        if (fixed && !transformed) {
	            var scrollParent = getScrollParent(parent);
	            parentRect.top += scrollParent.scrollTop;
	            parentRect.bottom += scrollParent.scrollTop;
	            parentRect.left += scrollParent.scrollLeft;
	            parentRect.right += scrollParent.scrollLeft;
	        }

	        var rect = {
	            top: elementRect.top - parentRect.top,
	            left: elementRect.left - parentRect.left,
	            bottom: elementRect.top - parentRect.top + elementRect.height,
	            right: elementRect.left - parentRect.left + elementRect.width,
	            width: elementRect.width,
	            height: elementRect.height
	        };
	        return rect;
	    }

	    /**
	     * Get the prefixed supported property name
	     * @function
	     * @ignore
	     * @argument {String} property (camelCase)
	     * @returns {String} prefixed property (camelCase)
	     */
	    function getSupportedPropertyName(property) {
	        var prefixes = ['', 'ms', 'webkit', 'moz', 'o'];

	        for (var i = 0; i < prefixes.length; i++) {
	            var toCheck = prefixes[i] ? prefixes[i] + property.charAt(0).toUpperCase() + property.slice(1) : property;
	            if (typeof root.document.body.style[toCheck] !== 'undefined') {
	                return toCheck;
	            }
	        }
	        return null;
	    }

	    /**
	     * The Object.assign() method is used to copy the values of all enumerable own properties from one or more source
	     * objects to a target object. It will return the target object.
	     * This polyfill doesn't support symbol properties, since ES5 doesn't have symbols anyway
	     * Source: https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Object/assign
	     * @function
	     * @ignore
	     */
	    if (!Object.assign) {
	        Object.defineProperty(Object, 'assign', {
	            enumerable: false,
	            configurable: true,
	            writable: true,
	            value: function value(target) {
	                if (target === undefined || target === null) {
	                    throw new TypeError('Cannot convert first argument to object');
	                }

	                var to = Object(target);
	                for (var i = 1; i < arguments.length; i++) {
	                    var nextSource = arguments[i];
	                    if (nextSource === undefined || nextSource === null) {
	                        continue;
	                    }
	                    nextSource = Object(nextSource);

	                    var keysArray = Object.keys(nextSource);
	                    for (var nextIndex = 0, len = keysArray.length; nextIndex < len; nextIndex++) {
	                        var nextKey = keysArray[nextIndex];
	                        var desc = Object.getOwnPropertyDescriptor(nextSource, nextKey);
	                        if (desc !== undefined && desc.enumerable) {
	                            to[nextKey] = nextSource[nextKey];
	                        }
	                    }
	                }
	                return to;
	            }
	        });
	    }

	    return Popper;
	});

/***/ },
/* 20 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _jquery = __webpack_require__(3);

	var _jquery2 = _interopRequireDefault(_jquery);

	var _emitter = __webpack_require__(5);

	var _emitter2 = _interopRequireDefault(_emitter);

	var _defaults = __webpack_require__(21);

	var _defaults2 = _interopRequireDefault(_defaults);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	var NAME = 'validation';
	var DEFAULTS = {
	  events: 'blur',
	  selector: '[data-required]'
	};

	var Validation = function () {
	  function Validation(element, options) {
	    _classCallCheck(this, Validation);

	    this.$element = (0, _jquery2.default)(element);
	    this.options = _jquery2.default.extend({}, DEFAULTS, options || {});
	  }

	  _createClass(Validation, [{
	    key: 'init',
	    value: function init() {
	      this._fields = this.$element.find(this.options.selector);

	      this.bindListeners();

	      return this;
	    }
	  }, {
	    key: 'bindListeners',
	    value: function bindListeners() {
	      var _this = this;

	      this.handler = function (e) {
	        _this.validate(e.target);
	      };

	      this.$element.off(this.options.events, this.options.selector, this.handler);
	      this.$element.on(this.options.events, this.options.selector, this.handler);
	    }
	  }, {
	    key: 'setPristine',
	    value: function setPristine(field) {
	      _emitter2.default.emit('validation:pristine', field);
	    }
	  }, {
	    key: 'validate',
	    value: function validate(field) {
	      var _this2 = this;

	      var rules = field.getAttribute('data-validate');

	      if (!rules) {
	        return;
	      }

	      rules = rules.split(' ').reduce(function (errors, rule) {
	        if (!_this2.rules[rule].call(_this2, field, _this2.$element)) {
	          errors.push(rule);
	        }

	        return errors;
	      }, []);

	      _emitter2.default.emit('validation:' + (!rules.length ? 'success' : 'error'), field, rules);

	      return !rules.length;
	    }
	  }, {
	    key: 'validateAll',
	    value: function validateAll() {
	      return Array.prototype.map.call(this.getFilteredInputs(), this.validate, this).every(function (validation) {
	        return validation;
	      });
	    }
	  }, {
	    key: 'getFilteredInputs',
	    value: function getFilteredInputs() {
	      return Array.prototype.filter.call(this.$element.find(this.options.selector), this.getValidInputs);
	    }
	  }, {
	    key: 'getValidInputs',
	    value: function getValidInputs(input) {
	      return input.hasAttribute('data-validate');
	    }
	  }]);

	  return Validation;
	}();

	Validation.prototype.rules = _defaults2.default;

	/* istanbul ignore next */
	_jquery2.default.fn[NAME] = function (options) {
	  options = options || {};

	  return this.each(function () {
	    if (!_jquery2.default.data(this, NAME)) {
	      _jquery2.default.data(this, NAME, new Validation(this, options).init());
	    }
	  });
	};

	exports.default = Validation;

/***/ },
/* 21 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _required = __webpack_require__(22);

	var _required2 = _interopRequireDefault(_required);

	var _confirm = __webpack_require__(23);

	var _confirm2 = _interopRequireDefault(_confirm);

	var _minlength = __webpack_require__(24);

	var _minlength2 = _interopRequireDefault(_minlength);

	var _maxlength = __webpack_require__(25);

	var _maxlength2 = _interopRequireDefault(_maxlength);

	var _email = __webpack_require__(26);

	var _email2 = _interopRequireDefault(_email);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	exports.default = {
	  required: _required2.default,
	  confirm: _confirm2.default,
	  minlength: _minlength2.default,
	  maxlength: _maxlength2.default,
	  email: _email2.default
		};

/***/ },
/* 22 */
/***/ function(module, exports) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	exports.default = function (field, $form) {
	  if (field.type === 'checkbox') {
	    return field.checked;
	  }

	  if (field.type === 'radio') {
	    return $form.find('[name="' + field.name + '"]:checked').length;
	  }

	  return !!field.value.trim();
	};

/***/ },
/* 23 */
/***/ function(module, exports) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	exports.default = function (field, $form) {
	  return field.value === $form.find('[name="' + field.getAttribute('data-confirm') + '"]').val();
		};

/***/ },
/* 24 */
/***/ function(module, exports) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	exports.default = function (field) {
	  return field.value.length >= field.getAttribute('data-minlength');
		};

/***/ },
/* 25 */
/***/ function(module, exports) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	exports.default = function (field) {
	  return field.value.length <= field.getAttribute('maxlength');
		};

/***/ },
/* 26 */
/***/ function(module, exports) {

	"use strict";

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	exports.default = function (field) {
	  return (/^[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*$/.test(field.value)
	  );
		};

/***/ }
/******/ ]);
//# sourceMappingURL=garden.min.js.map